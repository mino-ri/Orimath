<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Testexp</name></assembly>
<members>
<member name="T:Testexp.IArgumentGenerator`1">
<summary>
 Represents argument generators for property based testing.
</summary>
</member>
<member name="T:Testexp.RandomState">
<summary>
 For internal used.
</summary>
</member>
<member name="T:Testexp.ValidationException`1">
<summary>
 Thrown when tests fail.
</summary>
</member>
<member name="T:Testexp.ValidationExceptionBase">
<summary>
 Thrown when tests fail.
</summary>
</member>
<member name="T:Testexp.ITesting`1">
<summary>
 Represents assertable testing functions.
</summary>
</member>
<member name="T:Testexp.Assertion">
<summary>
 Represents untyped assertion functions.
</summary>
</member>
<member name="P:Testexp.TestContext`1.Result">
<summary>
 Gets return value of the target function.
</summary>
</member>
<member name="P:Testexp.TestContext`1.Arguments">
<summary>
 Gets arguments passed to the target function.
</summary>
</member>
<member name="T:Testexp.TestContext`1">
<summary>
 Represents testing contexts.
</summary>
</member>
<member name="M:Testexp.Implementations.TestingBuilder.Bind``1(Testexp.ITesting{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Testexp.TestContext{``0},Microsoft.FSharp.Core.Unit}})">
<summary>
 for test execution
</summary>
</member>
<member name="M:Testexp.Implementations.TestingBuilder.Bind``1(Testexp.IArgumentGenerator{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Testexp.RandomState,Testexp.RandomState}})">
<summary>
 for argument (property based test)
</summary>
</member>
<member name="M:Testexp.Implementations.TestingBuilder.Bind``1(System.Tuple{System.Int32,Testexp.IArgumentGenerator{``0}},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Testexp.RandomState,Testexp.RandomState}})">
<summary>
 for argument (property based test)
</summary>
</member>
<member name="M:Testexp.Assert.error``3(Microsoft.FSharp.Core.FSharpResult{``0,``1},Testexp.TestContext{``2})">
<summary>
 Verifies that the result is Error.
</summary>
</member>
<member name="M:Testexp.Assert.ok``3(Microsoft.FSharp.Core.FSharpResult{``0,``1},Testexp.TestContext{``2})">
<summary>
 Verifies that the result is Ok.
</summary>
</member>
<member name="M:Testexp.Assert.vnone``2(Microsoft.FSharp.Core.FSharpValueOption{``0},Testexp.TestContext{``1})">
<summary>
 Verifies that the value option is ValueNone.
</summary>
</member>
<member name="M:Testexp.Assert.vsome``2(Microsoft.FSharp.Core.FSharpValueOption{``0},Testexp.TestContext{``1})">
<summary>
 Verifies that the value option is ValueSome.
</summary>
</member>
<member name="M:Testexp.Assert.none``2(Microsoft.FSharp.Core.FSharpOption{``0},Testexp.TestContext{``1})">
<summary>
 Verifies that the option is None.
</summary>
</member>
<member name="M:Testexp.Assert.some``2(Microsoft.FSharp.Core.FSharpOption{``0},Testexp.TestContext{``1})">
<summary>
 Verifies that the option is Some.
</summary>
</member>
<member name="M:Testexp.Assert.isNull``2(``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the value is null.
</summary>
</member>
<member name="M:Testexp.Assert.notNull``2(``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the value is not null.
</summary>
</member>
<member name="M:Testexp.Assert.endsWith``1(System.String,System.String,Testexp.TestContext{``0})">
<summary>
 Verifies that the string ends with the expected substring.
</summary>
</member>
<member name="M:Testexp.Assert.startsWith``1(System.String,System.String,Testexp.TestContext{``0})">
<summary>
 Verifies that the string starts with the expected substring.
</summary>
</member>
<member name="M:Testexp.Assert.hasSubstring``1(System.String,System.String,Testexp.TestContext{``0})">
<summary>
 Verifies that the string contains the expected substring.
</summary>
</member>
<member name="M:Testexp.Assert.notContains``2(``0,System.Collections.Generic.IEnumerable{``0},Testexp.TestContext{``1})">
<summary>
 Verifies that the sequence does not contain the expected value.
</summary>
</member>
<member name="M:Testexp.Assert.contains``2(``0,System.Collections.Generic.IEnumerable{``0},Testexp.TestContext{``1})">
<summary>
 Verifies that the sequence contains the expected value.
</summary>
</member>
<member name="M:Testexp.Assert.lessThanOrEqual``2(``0,``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the actual value is less than or equal to the expected value.
</summary>
</member>
<member name="M:Testexp.Assert.greaterThanOrEqual``2(``0,``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the actual value is greater than or equal to the expected value.
</summary>
</member>
<member name="M:Testexp.Assert.lessThan``2(``0,``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the actual value is less than the expected value.
</summary>
</member>
<member name="M:Testexp.Assert.greaterThan``2(``0,``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the actual value is greater than the expected value.
</summary>
</member>
<member name="M:Testexp.Assert.notEqual``2(``0,``0,Testexp.TestContext{``1})">
<summary>
 Verifies that two values are not equal.
</summary>
</member>
<member name="M:Testexp.Assert.equal``2(``0,``0,Testexp.TestContext{``1})">
<summary>
 Verifies that two values are equal.
</summary>
</member>
<member name="M:Testexp.Assert.formatError2``2(System.String,``0,``1)">
<summary>
 Formats a error explanation.
</summary>
</member>
<member name="M:Testexp.Assert.formatError``1(System.String,``0)">
<summary>
 Formats a error explanation.
</summary>
</member>
<member name="M:Testexp.Assert.shouldNot``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{``0,System.String},``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the value does not satisfy the specified condition.
</summary>
</member>
<member name="M:Testexp.Assert.should``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Core.FSharpFunc{``0,System.String},``0,Testexp.TestContext{``1})">
<summary>
 Verifies that the value satisfies the specified condition.
</summary>
</member>
<member name="M:Testexp.Assert.isFalse``1(System.Boolean,Testexp.TestContext{``0})">
<summary>
 Verifies that the condition is false.
</summary>
</member>
<member name="M:Testexp.Assert.isTrue``1(System.Boolean,Testexp.TestContext{``0})">
<summary>
 Verifies that the condition is ture.
</summary>
</member>
<member name="M:Testexp.Assert.thrown``1">
<summary>
 Verifies that the exact exception is thrown.
</summary>
</member>
<member name="M:Testexp.Assert.fail``1(System.String,Testexp.TestContext{``0})">
<summary>
 Fails the test.
</summary>
</member>
<member name="P:Testexp.TestOperators.testing">
<summary>
 Executes a (property based) test using computation expression syntax.
</summary>
</member>
<member name="P:Testexp.TestOperators.argGen">
<summary>
 Builds a argument generator using computation expression syntax.
</summary>
</member>
<member name="M:Testexp.TestOperators.op_EqualsEqualsGreater``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0,``1)">
<summary>
 Pipes the result value from ITesting to assersion.
</summary>
</member>
<member name="M:Testexp.TestOperators.test``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Testexp.ITesting{``2}}},``0,``1)">
<summary>
 Creates ITesting from curried-style or tuple-style function.
</summary>
</member>
<member name="M:Testexp.ArgGen.asciiString(Testexp.IArgumentGenerator{System.Int32})">
<summary>
 Creates an argument generator that returns random ascii strings.
</summary>
</member>
<member name="M:Testexp.ArgGen.string(Testexp.IArgumentGenerator{System.Char},Testexp.IArgumentGenerator{System.Int32})">
<summary>
 Creates an argument generator that returns strings containing the char generated by the specified generator.
</summary>
</member>
<member name="M:Testexp.ArgGen.array``1(Testexp.IArgumentGenerator{``0},Testexp.IArgumentGenerator{System.Int32})">
<summary>
 Creates an argument generator that returns arrays containing the values generated by the specified generator.
</summary>
</member>
<member name="M:Testexp.ArgGen.list``1(Testexp.IArgumentGenerator{``0},Testexp.IArgumentGenerator{System.Int32})">
<summary>
 Creates an argument generator that returns lists containing the values generated by the specified generator.
</summary>
</member>
<member name="M:Testexp.ArgGen.forEach``1(``0[])">
<summary>
 Creates an argument generator that returns each items.
</summary>
</member>
<member name="M:Testexp.ArgGen.floatRange(System.Double,System.Double)">
<summary>
 Creates an argument generator that returns random floating point numbers in the specified range.
</summary>
</member>
<member name="P:Testexp.ArgGen.asciiChar">
<summary>
 Creates an argument generator that returns random ascii chars (0x20 - 0x7E).
</summary>
</member>
<member name="P:Testexp.ArgGen.uint">
<summary>
 Gets an argument generator that returns any uint value.
</summary>
</member>
<member name="P:Testexp.ArgGen.int">
<summary>
 Gets an argument generator that returns any int value.
</summary>
</member>
<member name="P:Testexp.ArgGen.uint64">
<summary>
 Gets an argument generator that returns any uint64 value.
</summary>
</member>
<member name="P:Testexp.ArgGen.uint32">
<summary>
 Gets an argument generator that returns any uint32 value.
</summary>
</member>
<member name="P:Testexp.ArgGen.uint16">
<summary>
 Gets an argument generator that returns any uint16 value.
</summary>
</member>
<member name="P:Testexp.ArgGen.byte">
<summary>
 Gets an argument generator that returns any byte value.
</summary>
</member>
<member name="P:Testexp.ArgGen.int64">
<summary>
 Gets an argument generator that returns any int64 value.
</summary>
</member>
<member name="P:Testexp.ArgGen.int32">
<summary>
 Gets an argument generator that returns any int32 value.
</summary>
</member>
<member name="P:Testexp.ArgGen.int16">
<summary>
 Gets an argument generator that returns any int16 value.
</summary>
</member>
<member name="P:Testexp.ArgGen.sbyte">
<summary>
 Gets an argument generator that returns any sbyte value.
</summary>
</member>
<member name="M:Testexp.ArgGen.charRange(System.Char,System.Char)">
<summary>
 Creates an argument generator that returns random chars in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.uintRange(System.UInt32,System.UInt32)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.intRange(System.Int32,System.Int32)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.uint64Range(System.UInt64,System.UInt64)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.uint32Range(System.UInt32,System.UInt32)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.uint16Range(System.UInt16,System.UInt16)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.byteRange(System.Byte,System.Byte)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.int64Range(System.Int64,System.Int64)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.int32Range(System.Int32,System.Int32)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.int16Range(System.Int16,System.Int16)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.sbyteRange(System.SByte,System.SByte)">
<summary>
 Creates an argument generator that returns random integers in the specified range.
</summary>
</member>
<member name="M:Testexp.ArgGen.generator``1(Microsoft.FSharp.Core.FSharpFunc{System.UInt64,``0})">
<summary>
 Creates an argument generator from the generator function.
</summary>
</member>
<member name="M:Testexp.ArgGen.generatorInline``1(Microsoft.FSharp.Core.FSharpFunc{System.UInt64,``0})">
<summary>
 Creates an argument generator from the generator function. This is an inline function.
</summary>
</member>
<member name="M:Testexp.ArgGen.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Testexp.IArgumentGenerator{``0})">
<summary>
 Represents the functor map operator for IArgumentGenerator&lt;T&gt;.
</summary>
</member>
<member name="M:Testexp.ArgGen.mapInline``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Testexp.IArgumentGenerator{``0})">
<summary>
 Represents the functor map operator for IArgumentGenerator&lt;T&gt;. This is an inline function.
</summary>
</member>
<member name="M:Testexp.ArgGen.bind``2(Microsoft.FSharp.Core.FSharpFunc{``0,Testexp.IArgumentGenerator{``1}},Testexp.IArgumentGenerator{``0})">
<summary>
 Represents the monad bind operator for IArgumentGenerator&lt;T&gt;.
</summary>
</member>
<member name="M:Testexp.ArgGen.bindInline``2(Microsoft.FSharp.Core.FSharpFunc{``0,Testexp.IArgumentGenerator{``1}},Testexp.IArgumentGenerator{``0})">
<summary>
 Represents the monad bind operator for IArgumentGenerator&lt;T&gt;. This is an inline function.
</summary>
</member>
<member name="M:Testexp.ArgGen.constant``1(``0)">
<summary>
 Creates an argument generator that returns the constant value.
</summary>
</member>
<member name="P:Testexp.ArgGen.random">
<summary>
 Gets an argument generator that returns pseudo-random numbers. This generates the same numbers in the same order each time.
</summary>
</member>
</members>
</doc>
